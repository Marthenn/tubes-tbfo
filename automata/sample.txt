MAIN_STATE -> MAIN_STATE MAIN_STATE | IF_STATE | LOOP_STATE | FUNCTION_STATE | TRY_STATE | DECLARATION | COMMENT



/* CONDITIONAL */
IF_STATE -> IF ROUND_BRACKET_OPEN CONDITION_FA ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE | IF ROUND_BRACKET_OPEN CONDITION_FA ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE ELSE_STATE
ELSE_STATE -> ELSE IF_STATE | ELSE CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE
SWITCH_STATE -> SWITCH ROUND_BRACKET_OPEN VAR_NAME CURLY_BARACKET_CLOSE CURLY_BARACKET_OPEN SWITCH_BODY CURLY_BARACKET_CLOSE
SWITCH_BODY -> CASE OPERATION COLON MAIN_STATE | CASE OPERATION COLON MAIN_STATE BREAK | SWITCH_BODY SWITCH_BODY | DEFAULT COLON MAIN_STATE



/* LOOP */
LOOP_STATE -> FOR_STATE | WHILE_STATE
FOR_STATE -> FOR ROUND_BRACKET_OPEN FOR_ALGO ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE | FOR ROUND_BRACKET_OPEN FOR_ALGO ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE BREAK MAIN_STATE CURLY_BARACKET_CLOSE | FOR ROUND_BRACKET_OPEN FOR_ALGO ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE CONTINUE MAIN_STATE CURLY_BARACKET_CLOSE
WHILE_STATE -> WHILE ROUND_BRACKET_OPEN OPS_TYPE ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE | WHILE ROUND_BRACKET_OPEN OPS_TYPE ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE BREAK MAIN_STATE CURLY_BARACKET_CLOSE | WHILE ROUND_BRACKET_OPEN OPS_TYPE ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE CONTINUE MAIN_STATE CURLY_BARACKET_CLOSE



/* FUNCTION */
FUNCTION_STATE -> FUNCTION FUNCTION_HEAD CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE | FUNCTION FUNCTION_HEAD CURLY_BARACKET_OPEN MAIN_STATE RETURN_STATEMENT CURLY_BARACKET_CLOSE
RETURN_STATEMENT -> RETURN | RETURN OPS_TYPE
FUNCTION_HEAD -> VAR_NAME ROUND_BRACKET_OPEN PARAMETER ROUND_BRACKET_CLOSE



/* TRY/CATCH */
TRY_STATE -> TRY_BODY CATCH_BODY | TRY_BODY CATCH_BODY FINALLY_BODY | TRY_BODY FINALLY_BODY
TRY_BODY -> TRY CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE
CATCH_BODY -> CATCH ROUND_BRACKET_OPEN VAR_NAME ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE | CATCH ROUND_BRACKET_OPEN VAR_NAME ROUND_BRACKET_CLOSE ROUND_BRACKET_OPEN VAR ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE CATCH_BODY
FINALLY_BODY -> FINALLY CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE



SENTENCE -> WORD | WORD SENTENCE
COMMENT -> SLASH SENTENCE | COMMENT_START SENTENCE COMMENT_END



DECLARATION -> CONST_DECLARATION | LET_DECLARATION | VAR_DECLARATION
CONST_DECLARATION -> CONST VAR_NAME EQUALS OPERATION | CONST VAR_NAME EQUALS NEW VAR_NAME OPEN_BRACKET PARAMETER CLOSE_BRACKET
LET_DECLARATION -> LET VAR_NAME | LET VAR_NAME EQUALS OPERATION | LET VAR_NAME EQUALS NEW VAR_NAME OPEN_BRACKET PARAMETER CLOSE_BRACKET
VAR_DECLARATION -> VAR VAR_NAME | VAR VAR_NAME EQUALS OPERATION | VAR VAR_NAME EQUALS NEW VAR_NAME OPEN_BRACKET PARAMETER CLOSE_BRACKET



LIST_ACCESS -> VAR_NAME OPEN_SQUARE OPERATION CLOSE_SQUARE
LIST_DECLARATION -> OPEN_SQUARE PARAMETER CLOSE_SQUARE



DELETE_STATE -> DELETE VAR_NAME DOT VAR_NAME



PARAMETER -> PARAMETER_B | EPSILON
PARAMETER_B -> OPS_TYPE | OPS_TYPE COMMA PARAMETER_B | VAR_NAME EQUALS OPERATION | VAR_NAME EQUALS OPERATION COMMA PARAMETER B



THROW_STATE -> THROW OPERATION



FOR_ALGO -> FOR_INIT FOR_CONDITION FOR_OPERATION
FOR_INIT -> LET_DECLARATION | VAR_DECLARATION | OPS_TYPE | EPSILON
FOR_CONDITION -> CONDITION | EPSILON
FOR_OPERATION -> OPERATION | EPSILON



CONDITION -> VAR_NAME COMPARATOR VAR_NAME | VAR_NAME COMPARATOR NUMBERS | NUMBERS COMPARATOR NUMBERS | NUMBERS COMPARATOR VAR_NAME



/* TERMINAL ACCESS */
IF -> if
ELSE -> else
SWITCH -> switch
CASE -> case
DEFAULT -> default
FOR -> for
WHILE -> while
BREAK -> break
CONTINUE -> continue
FUNCTION -> function
RETURN -> return
TRY -> try
CATCH -> catch
FINALLY -> finally
THROW -> throw
VAR -> var
LET -> let
CONST -> const
TRUE -> true
FALSE -> false
NULL -> null
DELETE -> delete
NEW -> new
ROUND_BRACKET_OPEN -> [
ROUND_BRACKET_CLOSE -> ]
CURLY_BARACKET_OPEN -> {
CURLY_BARACKET_CLOSE -> }
ROUND_BRACKET_OPEN -> (
ROUND_BRACKET_CLOSE -> )
LOWER_THAN -> <
GREATER_THAN -> >
COMMA -> ,
DOT -> .
SLASH -> //
COMMENT_START -> /*
COMMENT_END -> */
COLON -> :
SEMI_COLON -> ;
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "