FUNCTION_CALL -> VAR_NAME ROUND_BRACKET_OPEN PARAMETER ROUND_BRACKET_CLOSE | VAR_NAME DOT VAR_NAME ROUND_BRACKET_OPEN PARAMETER ROUND_BRACKET_CLOSE

PARAMETER -> PARAMETER COMMA PARAMETER | PARAM | EPSILON
PARAM -> VAR_NAME | ASSIGNMENT | EXPR | STRING | FUNCTION_CALL | BOOLEAN | NAN | NULL | LIST_ACCESS
BOOLEAN -> TRUE | FALSE

ASSIGNMENT -> VAR_NAME ASSIGNMENT_SYMBOL OPS_TYPE | VAR_NAME ASSIGNMENT_SYMBOL CURLY_BRACKET_OPEN OBJECT_DECLARATION CURLY_BRACKET_CLOSE
ASSIGNMENT_SYMBOL -> EQUALS | PLUS EQUALS | MIN EQUALS | MULTIPLY EQUALS | DIVIDE EQUALS | MOD EQUALS | MULTIPLY MUTIPLY EQUALS | RIGHT RIGHT EQUALS | LEFT LEFT EQUALS | LEFT LEFT LEFT EQUALS | AND EQUALS | OR EQUALS | XOR EQUALS | AND AND EQUALS | OR OR EQUALS | QUESTION QUESTION EQUALS

OPS_TYPE -> PARAM | TERNARY

LIST_ACCESS -> VAR_NAME LIST_INDEX
LIST_INDEX -> LIST_INDEX LIST_INDEX | OPEN_SQUARE_BRACKET EXPR CLOSE_SQUARE_BRACKET

EPSILON -> epsilon
IF -> if
EXPR -> expr
CURLY_BRACKET_OPEN -> {
CURLY_BRACKET_CLOSE -> }
OPEN_SQUARE_BRACKET -> [
CLOSE_SQUARE_BRACKET -> ]
ROUND_BRACKET_OPEN -> (
ROUND_BRACKET_CLOSE -> )
ELSE -> else
SWITCH -> switch
CASE -> case
VAR_NAME -> var_name
BREAK -> break
DEFAULT -> default
COLON -> :
FOR -> for
WHILE -> while
CONTINUE -> continue
RETURN -> return
TRY -> try
CATCH -> catch
FINALLY -> finally
THROW -> throw
COMMA -> ,
STRING -> string
EQUALS -> =
PLUS -> +
MIN -> -
MULTIPLY -> *
DIVIDE -> /
MOD -> %
RIGHT -> <
LEFT -> >
AND -> &
OR -> |
XOR -> ^
QUESTION -> ?
DELETE -> delete
CONST -> const
LET -> let
VAR -> var
TRUE -> true
FALSE -> false
NAN -> NaN
NULL -> null
DOT -> .
TERNARY -> ternary